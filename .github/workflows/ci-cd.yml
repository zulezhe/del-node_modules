name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16.x, 18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Test CLI help
        run: node bin/cli.js --help
      
      - name: Test CLI version (Chinese)
        run: node bin/cli.js --help --lang zh-CN
      
      - name: Test CLI version (English)
        run: node bin/cli.js --help --lang en-US

  release:
    name: Create Release
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Get version from package.json
        id: package_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.package_version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Git tag
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.package_version.outputs.VERSION }}" -m "Release v${{ steps.package_version.outputs.VERSION }}"
          git push origin "v${{ steps.package_version.outputs.VERSION }}"
      
      - name: Generate changelog
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "CHANGELOG=- Initial release" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package_version.outputs.VERSION }}
          name: Release v${{ steps.package_version.outputs.VERSION }}
          body: |
            ## ðŸš€ Release v${{ steps.package_version.outputs.VERSION }}
            
            ### Changes
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### Installation
            ```bash
            npm install -g dnm@${{ steps.package_version.outputs.VERSION }}
            ```
            
            ### Usage
            ```bash
            dnm --help
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Publish to NPM
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
